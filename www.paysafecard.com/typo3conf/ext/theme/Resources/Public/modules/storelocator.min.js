void 0 === window.StoreLocator && (window.StoreLocator = {
    config: {
        countryCode: "AT",
        languageCode: "de",
        queryString: null,
        initialPlaceId: null,
        displayedProduct: "psc",
        i18n: {}
    },
    fetchPosUrl: "/index.php?eID=storeLocator",
    ratePosUrl: "/index.php?eID=storeLocatorPosFeedback",
    ratePosCookie: "pscstorelocator",
    map: null,
    place: null,
    placeMarker: null,
    infoWindow: null,
    autocompleteService: null,
    geocoderService: null,
    geocoderResult: null,
    userGeoLocation: null,
    userAddress: null,
    timer: null,
    cachedAutocompleteRequests: [],
    posRequests: [],
    posMarkers: [],
    searchRequestInProgress: !1,
    init: function(e) {
        for (let t in e) this.config[t] = e[t];
        this.initializeAutocompleteService(), this.initializeGeoLocation();
        let t = this;
        this.isTeaser() || (this.getDirectOnlyCheckbox() && this.getDirectOnlyCheckbox().addEventListener("change", function() {
            this.getSearchFieldValue() && this.displayLocation()
        }.bind(this)), e.queryString && ("mylocation" === e.queryString ? this.locateMe() : (this.setSearchFieldValue(e.queryString), this.displayLocation())), this.getForm().addEventListener("submit", function(e) {
            e.preventDefault(), this.displayLocation()
        }.bind(this)), document.getElementById("storelocator-filter-open").addEventListener("change", (function() {
            t.applyFilters()
        })), document.getElementById("storelocator-filter-toprated").addEventListener("change", (function() {
            t.applyFilters()
        })), document.getElementsByTagName("header")[0].classList.add("bg-white"))
    },
    initializeAutocompleteService: function() {
        this.autocompleteService = new google.maps.places.AutocompleteService, this.geocoderService = new google.maps.Geocoder, this.getSearchField().addEventListener("input", this.debounce(function(e) {
            this.hideNotFoundErrorSection();
            const t = this.getSearchFieldValue();
            t.length >= 2 ? this.getAutocompleteSuggestions(this.getAutocompleteOptions(/^\d+$/.test(this.getSearchFieldValue())), function(e, o) {
                this.cacheAutocompleteResult(t, e, o), this.searchRequestInProgress || this.autocompletePlacePredictionsDisplayResultsCallback(e, o)
            }.bind(this)) : this.hideAutocompleteSection()
        }.bind(this), 1e3)), document.addEventListener("click", function(e) {
            const t = e.target.closest(".pac-item");
            if (t) {
                const e = t.getAttribute("data-placeid"),
                    o = t.querySelector(".pac-item-query").innerText;
                this.setSearchFieldValue(o), this.setPlaceIdHiddenFieldValue(e), this.hideAutocompleteSection(), this.isTeaser() || this.geocoderService.geocode({
                    placeId: e
                }, this.geocoderCallback.bind(this))
            }
        }.bind(this))
    },
    getAutocompleteOptions: function(e = !1) {
        let t = {
            input: this.getSearchFieldValue(),
            types: ["geocode"]
        };
        return e && (t.componentRestrictions = {
            country: this.config.countryCode
        }), t
    },
    forceAutocomplete: function() {
        if (this.getSearchFieldValue().length > 0) {
            if (this.config.initialPlaceId) return this.geocoderService.geocode({
                placeId: this.config.initialPlaceId
            }, this.geocoderCallback.bind(this)), void(this.config.initialPlaceId = null);
            this.getAutocompleteSuggestions(this.getAutocompleteOptions(/^\d+$/.test(this.getSearchFieldValue())), function(e, t) {
                if (t === google.maps.places.PlacesServiceStatus.OK) {
                    const t = e[0];
                    this.setPlaceIdHiddenFieldValue(t.place_id), this.geocoderService.geocode({
                        placeId: t.place_id
                    }, this.geocoderCallback.bind(this))
                } else this.showNotFoundErrorSection()
            }.bind(this))
        } else this.showNotFoundErrorSection()
    },
    isTeaser: function() {
        return !!document.querySelector(".js-storelocator-teaser")
    },
    getContainer: function() {
        return this.isTeaser() ? document.querySelector(".js-storelocator-teaser") : document.querySelector(".js-storelocator")
    },
    getAutocompleteSuggestions: function(e, t) {
        const o = e.input;
        if (this.searchRequestInProgress) return void this.hideAutocompleteSection();
        const s = this.getCachedAutocompleteResult(o);
        s ? t(s.autocompleteResults, s.status) : this.autocompleteService.getPlacePredictions(e, t)
    },
    autocompletePlacePredictionsDisplayResultsCallback: function(e, t) {
        if (t === google.maps.places.PlacesServiceStatus.OK) {
            let t = "";
            e.forEach((function(e) {
                t += '<div class="pac-item" data-placeid="' + e.place_id + '"><i class="pre icon icon_pin"></i><span class="pac-item-query">' + e.description + "</span></div>"
            })), t.length > 0 && (this.getAutocompleteResultsContainer().innerHTML = t, this.showAutocompleteSection(), document.addEventListener("click", function(e) {
                e.target !== this.getAutocompleteSection() && this.hideAutocompleteSection()
            }.bind(this)))
        } else this.showNotFoundErrorSection()
    },
    cacheAutocompleteResult: function(e, t, o) {
        this.cachedAutocompleteRequests.push({
            queryString: e,
            autocompleteResults: t,
            status: o
        })
    },
    getCachedAutocompleteResult: function(e) {
        let t;
        const o = this.cachedAutocompleteRequests.length;
        for (let s = 0; s < o; s++)
            if (t = this.cachedAutocompleteRequests[s], t.queryString === e) return t
    },
    geocoderCallback: function(e, t) {
        if (t === google.maps.places.PlacesServiceStatus.OK) {
            const t = e[0];
            this.placeIsDisplayable(t) && (this.setSearchFieldValue(t.formatted_address), this.geocoderResult = t, this.displayLocation())
        }
    },
    placeIsDisplayable: function(e) {
        return null !== e && "object" == typeof e && void 0 !== e.geometry
    },
    isMobileView: function() {
        return null !== document.getElementById("nav-tab").offsetParent
    },
    initializeMap: function() {
        if (null !== this.map) return;
        this.showMapSection(), this.map = new google.maps.Map(this.getMapContainer(), {
            zoom: 17,
            disableDefaultUI: !0,
            gestureHandling: "cooperative",
            scaleControl: !0,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        let e = this;
        google.maps.event.addListener(this.map, "mousedown", (function() {
            e.closeInfoWindow()
        })), google.maps.event.addListener(this.map, "dragend", (function() {
            e.placeMarker && (e.placeMarker.setMap(null), e.placeMarker = null);
            const t = this.getCenter();
            e.draggedLatitude = t.lat(), e.draggedLongitude = t.lng(), e.scheduleFetchPosByCoordinates(t.lat(), t.lng())
        })), google.maps.event.addListener(this.map, "resize", (function() {
            this.isMobileView() ? (document.getElementById("pos-list-entry-mobile").innerHTML = document.getElementById("pos" + marker.data.posId).innerHTML, document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-list-view").style.display = "none", document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-map-view").style.display = "block", document.getElementById("pos-list-entry-mobile").style.display = "block") : (e.infoWindow.open(e.map, marker), document.getElementById("pos" + marker.data.posId).scrollIntoView({
                block: "nearest",
                inline: "nearest"
            }))
        }))
    },
    displayLocation: function() {
        this.map || this.initializeMap(), this.placeIsDisplayable(this.geocoderResult) ? this.searchRequestInProgress || (this.searchRequestInProgress = !0, this.hideNotFoundErrorSection(), this.showMapSection(), this.place = this.geocoderResult, this.geocoderResult = null, this.place.geometry.viewport ? this.map.fitBounds(this.place.geometry.viewport) : (this.map.setCenter(this.place.geometry.location), this.map.setZoom(17)), this.placeMarker ? this.placeMarker.setPosition(this.place.geometry.location) : this.placeMarker = new google.maps.Marker({
            map: this.map,
            position: this.place.geometry.location,
            zIndex: 9e3
        }), this.fetchPosByPlace()) : this.forceAutocomplete()
    },
    fetchPosByPlace: function() {
        this.draggedLatitude = null, this.draggedLatitude = null, this.draggedLongitude = null, this.hidePosResultSection(), this.hideAutocompleteSection(), this.clearPosResultList(), this.clearPosMarkers();
        let e = new XMLHttpRequest;
        e.open("POST", this.fetchPosUrl), e.setRequestHeader("Content-Type", "application/json"), e.send(JSON.stringify({
            search: this.queryString,
            addressComponents: this.place.address_components,
            addressGeometry: {
                lat: this.place.geometry.location.lat(),
                lng: this.place.geometry.location.lng()
            },
            direct: this.getDirectOnlyValue(),
            displayedProduct: this.config.displayedProduct
        })), this.handleHttpRequest(e, !0)
    },
    scheduleFetchPosByCoordinates: function(e, t) {
        this.abortPosRequests(), clearTimeout(this.timer), this.timer = setTimeout(function() {
            this.fetchPosByCoordinates(e, t)
        }.bind(this), 250)
    },
    fetchPosByCoordinates: function(e, t) {
        this.hidePosResultSection();
        let o = new XMLHttpRequest;
        o.open("POST", this.fetchPosUrl), o.setRequestHeader("Content-Type", "application/json"), o.send(JSON.stringify({
            latitude: e,
            longitude: t,
            direct: this.getDirectOnlyValue(),
            displayedProduct: this.config.displayedProduct
        })), this.handleHttpRequest(o, !1)
    },
    handleHttpRequest: function(e, t) {
        let o = this;
        e.onreadystatechange = function() {
            if (4 === e.readyState && 200 === e.status && (o.searchRequestInProgress = !1, o.hideAutocompleteSection(), o.renderResults(JSON.parse(this.responseText)), t && (o.scrollToTop(), o.adjustMapToMarkers(), "function" == typeof ga))) {
                const e = ga.getAll()[0].get("name");
                ga(e + ".send", {
                    hitType: "pageview",
                    page: "/" + o.config.languageCode + "/pos-search-successful/",
                    title: "POS search successful",
                    "pos search term": o.getSearchFieldValue()
                })
            }
        }
    },
    abortPosRequests: function() {
        for (let e = 0; e < this.posRequests.length; e++) this.posRequests[e].abort();
        this.posRequests = []
    },
    renderResults: function(e) {
        if ("success" === e.status) {
            let t = e.data.pointsOfSale.reverse();
            for (let e in t) this.addPosMarker(t[e]), this.addPosResultListEntry(t[e])
        }
        this.applyFilters()
    },
    addPosResultListEntry: function(e) {
        let t = this.getFirstNonTextChild(this.getPosResultListEntryTemplate()).cloneNode(!0);
        t.setAttribute("data-pos-id", e.posId), t.setAttribute("id", "pos" + e.posId), e.feedbackSum > 0 ? (t.querySelector(".js-pos-rating-amount").innerText = e.feedbackSum, e.feedbackAverage >= 1 && (t.querySelector(".js-star-1-empty").style.display = "none", t.querySelector(".js-star-1-full").style.display = "inline"), e.feedbackAverage >= 2 && (t.querySelector(".js-star-2-empty").style.display = "none", t.querySelector(".js-star-2-full").style.display = "inline"), e.feedbackAverage >= 3 && (t.classList.add("filter-toprated"), t.querySelector(".js-star-3-empty").style.display = "none", t.querySelector(".js-star-3-full").style.display = "inline"), t.querySelector(".js-pos-rating").style.display = "flex") : t.classList.add("filter-toprated");
        let o = e.shopImageUrl ? e.shopImageUrl : e.posTypeLogo;
        "/typo3conf/ext/pscstorelocator/Resources/Public/Images/posicon/_posicon_default_logo.svg" === o ? t.querySelector(".js-pos-logo").remove() : t.querySelector(".js-pos-logo").setAttribute("src", o), t.querySelector(".js-pos-header").innerText = e.name;
        let s = null;
        switch (e.messageType) {
            case "INFO":
                s = "sales-outlet__available";
                break;
            case "PROMO":
                s = "sales-outlet__promo";
                break;
            case "WARN":
                s = "sales-outlet__warning"
        }
        if (null !== s && e.message && (t.querySelector(".js-pos-message p").innerText = e.message, t.querySelector(".js-pos-message p").classList.add(s), t.querySelector(".js-pos-message").style.display = "flex"), e.products && (t.querySelector(".js-available-products").innerText = e.products, t.querySelector(".js-available-products-section").style.display = "flex"), e.openingHours) {
            for (const o in e.openingHours) {
                let s = [];
                for (const t in e.openingHours[o].open) "00:00" !== e.openingHours[o].open[t].begin || "00:00" !== e.openingHours[o].open[t].end ? "closed" !== e.openingHours[o].open[t].begin || "closed" !== e.openingHours[o].open[t].end ? s.push(e.openingHours[o].open[t].begin + " - " + e.openingHours[o].open[t].end) : s.push(this.config.i18n.closedAllDay) : s.push(this.config.i18n.openAllDay);
                s.length > 0 && (t.querySelector(".js-open-" + o).innerText = s.join(", "), t.querySelector(".js-open-" + o + "-section").style.display = "block", t.querySelector(".js-opening-hours-section").style.display = "block")
            }
            if (this.isCurrentlyOpen(e.openingHours)) t.querySelector(".js-open").style.display = "block", t.classList.add("filter-open");
            else {
                t.querySelector(".js-closed").style.display = "block";
                let o = this.nextOpeningTime(e.openingHours);
                o && (t.querySelector(".js-opens-at").innerText = o, t.querySelector(".js-opens-at-span").style.display = "inline")
            }
        } else t.classList.add("filter-open");
        let i = e.address + "<br/>";
        i += e.postalCode + " " + e.city, t.querySelector(".js-pos-text").innerHTML = i;
        let n = "https://www.google.com/maps/dir/?api=1&destination=" + e.latitude + ", " + e.longitude;
        t.querySelector(".js-button-row-map-view .js-trigger-get-direction").href = n, t.querySelector(".js-button-row-list-view .js-trigger-get-direction").href = n, t.querySelector(".js-trigger-show-on-map").addEventListener("click", function(t) {
            t.preventDefault(), this.highlightPosMarker(e.posId)
        }.bind(this)), t.querySelector(".js-trigger-rate-pos").addEventListener("click", function(t) {
            t.preventDefault(), this.showRatingForm(e.posId)
        }.bind(this)), t.getElementsByClassName("js-button-row-list-view")[0].style.display = "block", t.getElementsByClassName("js-button-row-map-view")[0].style.display = "none", t.querySelector(".sales-outlet__open-collapse").setAttribute("id", "openView" + e.posId), t.querySelector(".sales-outlet__open-view").setAttribute("href", "#openView" + e.posId), t.querySelector(".sales-outlet__open-view").setAttribute("aria-controls", "#openView" + e.posId), this.getPosResultList().prepend(t), this.loadMoreButton()
    },
    isCurrentlyOpen: function(e) {
        const t = new Date,
            o = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"][t.getDay()],
            s = `${String(t.getHours()).padStart(2,"0")}:${String(t.getMinutes()).padStart(2,"0")}`;
        if (e[o])
            for (const t of e[o].open) {
                if ("00:00" === t.begin && "00:00" === t.end) return !0;
                if (s >= t.begin && s <= t.end) return !0
            }
        return !1
    },
    nextOpeningTime: function(e) {
        const t = new Date,
            o = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
        let s = t.getDay();
        const i = s,
            n = `${String(t.getHours()).padStart(2,"0")}:${String(t.getMinutes()).padStart(2,"0")}`;
        for (let t = 0; t < 7; t++) {
            const t = o[s];
            if (e[t])
                for (const o of e[t].open)
                    if (String(i) + n <= String(s) + o.begin) return this.config.i18n[t] + ", " + o.begin;
            s = (s + 1) % 7
        }
        return !1
    },
    loadMoreButton: function() {
        const e = document.querySelector(".js-load-more"),
            t = document.querySelectorAll(".js-result-list .js-pos-list-entry");
        e.style.display = "block";
        for (let e = 0; e < 6; e++) t[e] && (t[e].style.display = "block");
        e.addEventListener("click", (o => {
            o.preventDefault();
            for (let e = 6; e <= t.length; e++) t[e] && (t[e].style.display = "block");
            e.style.display = "none"
        }))
    },
    addPosMarker: function(e) {
        if (e.latitude && e.longitude) {
            const t = new google.maps.Marker({
                    map: this.map,
                    position: new google.maps.LatLng(e.latitude, e.longitude),
                    icon: e.posMarker,
                    visible: !0,
                    data: e
                }),
                o = {
                    url: "/typo3conf/ext/pscstorelocator/Resources/Public/Images/posicon/_posicon_default_logo_active.svg"
                };
            let s = this;
            google.maps.event.addListener(t, "click", (function() {
                "psc" === s.config.displayedProduct && (s.resetMarkerIcons(), t.setIcon(o)), s.infoWindow && s.infoWindow.close();
                const e = this.data;
                let i = "";
                e.feedbackAverage > 0 && (i = '<div class="rating-stars">' + s.displayRatingStars(e.feedbackAverage) + '<span class="feedback-sum"> (' + e.feedbackSum + ")</span></div>");
                let n = "";
                if (e.directload && (n = '<br /><a href="/paysafecard-direct/" style="font-size:25px;line-height:25px;" target="_blank" title="paysafecard direct"><i class="icon icon_directload-transaction"></i></a>'), s.infoWindow = new google.maps.InfoWindow({
                        maxWidth: 600,
                        content: '<div class="map-infowindow"><span>' + e.name + '</span><br/><div id="map-infowindow-body-content">' + e.address + "<br />" + e.postalCode + " " + e.city + n + "</div></div>" + i
                    }), document.getElementById("pos-list-entry-mobile").innerHTML = document.getElementById("pos" + t.data.posId).innerHTML, document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-list-view")[0].style.display = "none", document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-map-view")[0].style.display = "block", document.getElementById("pos-list-entry-mobile").querySelector(".js-trigger-rate-pos").addEventListener("click", (function(e) {
                        e.preventDefault(), s.showRatingForm(t.data.posId)
                    })), null === document.getElementById("nav-tab").offsetParent) {
                    s.infoWindow.open(s.map, t), document.getElementById("pos" + t.data.posId).scrollIntoView({
                        block: "nearest",
                        inline: "nearest"
                    });
                    let e = document.getElementsByClassName("js-pos-list-entry"),
                        o = e.length;
                    for (let t = 0; t < o; t++) e[t].classList.remove("js-pos-list-entry-active");
                    document.getElementById("pos" + t.data.posId).classList.add("js-pos-list-entry-active")
                } else document.getElementById("pos-list-entry-mobile").style.display = "block"
            })), this.posMarkers.push(t)
        }
    },
    displayRatingStars: function(e) {
        let t = "";
        for (let o = 1; o <= 3; o++) t += e >= o ? '<span class="star star--full"></span>' : '<span class="star star--empty"></span>';
        return t += "</div>", t
    },
    highlightPosMarker: function(e) {
        this.closeInfoWindow(), window.scrollTo(0, 0);
        const t = this.posMarkers.length;
        for (let o = 0; o < t; o++)
            if (this.posMarkers[o].data.posId === e) {
                this.posMarkers[o].setAnimation(google.maps.Animation.BOUNCE), this.posMarkers[o].setZIndex(9999);
                const e = this.posMarkers[o],
                    t = e.getPosition();
                this.map.setCenter(t), setTimeout((function() {
                    e.setAnimation(null)
                }), 2900)
            }
        return !1
    },
    getPosMarker: function(e) {
        const t = this.posMarkers.length;
        for (let o = 0; o < t; o++)
            if (this.posMarkers[o].data.posId === e) return this.posMarkers[o]
    },
    clearPosMarkers: function() {
        const e = this.posMarkers.length;
        for (let t = 0; t < e; t++) this.posMarkers[t].setMap(null);
        this.posMarkers = []
    },
    adjustMapToMarkers: function() {
        const e = this.posMarkers.length;
        if (e > 0) {
            let t = new google.maps.LatLngBounds;
            this.placeMarker && t.extend(this.placeMarker.getPosition());
            for (let o = 0; o < e; o++) t.extend(this.posMarkers[o].getPosition());
            this.map.fitBounds(t), this.map.getZoom() > 17 && this.map.setZoom(17)
        }
    },
    showRatingForm: function(e) {
        let t = this.getFirstNonTextChild(this.getPosRatingFormTemplate()).cloneNode(!0);
        t.setAttribute("data-pos-id", e);
        let o = this.getPosResultListEntryForPos(e);
        o.parentNode.insertBefore(t, o.nextSibling), document.getElementById("pos-list-entry-mobile").innerHTML = t.innerHTML, o.style.display = "none", t.style.display = "block";
        let s = [t, document.getElementById("pos-list-entry-mobile")];
        for (let o = 0; o < s.length; o++) s[o].querySelector(".js-trigger-rating-cancel").addEventListener("click", function(t) {
            t.preventDefault(), this.getPosRatingFormForPos(e).style.display = "none", this.getPosResultListEntryForPos(e).style.display = "block";
            let o = this;
            document.getElementById("pos-list-entry-mobile").innerHTML = document.getElementById("pos" + e).innerHTML, document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-list-view")[0].style.display = "none", document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-map-view")[0].style.display = "block", document.getElementById("pos-list-entry-mobile").querySelector(".js-trigger-rate-pos").addEventListener("click", (function(t) {
                t.preventDefault(), o.showRatingForm(e)
            }))
        }.bind(this)), s[o].querySelector(".js-trigger-rating-send").addEventListener("click", function(o) {
            o.preventDefault();
            let s = document.querySelector(".js-feedback");
            document.querySelectorAll('input[name="salesOutletRatingRadio"]:checked').length < 1 ? s.style.display = "block" : (s.style.display = "none", this.ratePos(e, t.querySelector('input[name="salesOutletRatingRadio"]:checked').value))
        }.bind(this))
    },
    showRatingDone: function(e) {
        this.getPosRatingFormForPos(e).remove();
        let t = this.getFirstNonTextChild(this.getPosRatingDoneTemplate()).cloneNode(!0);
        t.setAttribute("data-pos-id", e);
        let o = this.getPosResultListEntryForPos(e);
        o.parentNode.insertBefore(t, o.nextSibling), document.getElementById("pos-list-entry-mobile").innerHTML = t.innerHTML, o.style.display = "none", t.style.display = "block";
        let s = [t, document.getElementById("pos-list-entry-mobile")];
        for (let t = 0; t < s.length; t++) s[t].querySelector(".js-trigger-rating-done").addEventListener("click", function(t) {
            t.preventDefault(), this.getPosRatingDoneForPos(e).remove(), this.getPosResultListEntryForPos(e).style.display = "block", document.getElementById("pos-list-entry-mobile").innerHTML = document.getElementById("pos" + e).innerHTML, document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-list-view")[0].style.display = "none", document.getElementById("pos-list-entry-mobile").getElementsByClassName("js-button-row-map-view")[0].style.display = "block"
        }.bind(this))
    },
    ratePos: function(e, t) {
        this.showRatingDone(e);
        let o = this;
        fetch(this.ratePosUrl, {
            method: "POST",
            body: JSON.stringify({
                posId: e,
                rating: t,
                countryCode: this.config.countryCode,
                languageCode: this.config.languageCode
            })
        }).then((function(t) {
            o.writePosCookie(e)
        }))
    },
    writePosCookie: function(e) {
        let t = e + "|",
            o = this.readPosCookie();
        if (-1 === o.indexOf(t)) {
            let e = new Date;
            e.setTime(e.getTime() + 31536e6);
            const s = "; expires=" + e.toGMTString();
            document.cookie = this.ratePosCookie + "=" + o + t + s + "; path=/"
        }
    },
    readPosCookie: function() {
        const e = this.cookieName + "=",
            t = document.cookie.split(";");
        for (let o = 0; o < t.length; o++) {
            let s = t[o];
            for (;
                " " === s.charAt(0);) s = s.substring(1, s.length);
            if (0 === s.indexOf(e)) return s.substring(e.length, s.length)
        }
        return ""
    },
    initializeGeoLocation: function() {
        if (!("geolocation" in navigator)) return void(this.getLocateMeButton().css.visibility = "hidden");
        let e = this;
        this.getLocateMeButton().addEventListener("click", (function(t) {
            t.preventDefault(), e.locateMe()
        }))
    },
    locateMe: function() {
        this.isTeaser() || this.initializeMap(), navigator.geolocation.getCurrentPosition(function(e) {
            this.userGeoLocation = new google.maps.LatLng(e.coords.latitude, e.coords.longitude), this.userGeoLocation && this.geocoderService.geocode({
                location: this.userGeoLocation
            }, function(e, t) {
                if ("OK" === t && e[0])
                    if (e[0]) {
                        if (this.geocoderResult = e[0], this.userAddress = e[0].formatted_address, this.setSearchFieldValue(this.userAddress), this.setPlaceIdHiddenFieldValue(e[0].place_id), this.isTeaser()) return;
                        null == this.userLocationMarker && (this.userLocationMarker = new google.maps.Marker({
                            map: this.map
                        })), this.queryString = null, this.draggedLatitude = null, this.draggedLongitude = null, this.userLocationMarker.setPosition(this.userGeoLocation), this.placeMarker ? this.placeMarker.setPosition(this.userGeoLocation) : this.placeMarker = new google.maps.Marker({
                            map: null,
                            position: this.userGeoLocation
                        }), this.displayLocation()
                    } else console.err("Error Finding Address");
                else console.err("Geocoder failed due to:", t)
            }.bind(this))
        }.bind(this), function(e) {
            console.log(e), this.showNotFoundErrorSection()
        }.bind(this), {
            timeout: 101e3
        })
    },
    applyFilters: function() {
        let e = document.getElementById("storelocator-filter-open").checked,
            t = document.getElementById("storelocator-filter-toprated").checked;
        const o = document.querySelectorAll(".js-result-list .js-pos-list-entry");
        for (let s = 0; s < o.length; s++) {
            let i = o[s],
                n = this.getPosMarker(parseInt(i.dataset.posId));
            e && !i.classList.contains("filter-open") || t && !i.classList.contains("filter-toprated") ? (i.style.display = "none", n && n.setMap(null)) : (i.style.display = "block", n && n.setMap(this.map))
        }
    },
    getForm: function() {
        return this.getContainer().querySelector(".js-form")
    },
    getMapContainer: function() {
        return this.getContainer().querySelector(".js-map")
    },
    getSearchField: function() {
        return this.getContainer().querySelector(".js-search-field")
    },
    getSearchFieldValue: function() {
        return this.getSearchField().value
    },
    setSearchFieldValue: function(e) {
        this.getSearchField().value = e
    },
    getPlaceIdHiddenField: function() {
        return this.getContainer().querySelector(".js-place-id-hidden-field")
    },
    setPlaceIdHiddenFieldValue: function(e) {
        this.getPlaceIdHiddenField().value = e
    },
    getAutocompleteSection: function() {
        return this.getContainer().querySelector(".js-autocomplete-section")
    },
    showAutocompleteSection: function() {
        return this.getAutocompleteSection().style.display = "block"
    },
    hideAutocompleteSection: function() {
        return this.getAutocompleteSection().style.display = "none"
    },
    getAutocompleteResultsContainer: function() {
        return this.getContainer().querySelector(".js-autocomplete-results")
    },
    getNotFoundErrorSection: function() {
        return this.getContainer().querySelector(".js-location-not-found")
    },
    showNotFoundErrorSection: function() {
        this.geocoderResult = null, this.place = null;
        let e = document.querySelector(".js-storelocator .js-map > div");
        return e && e.classList.add("js-search-not-found"), this.getNotFoundErrorSection().style.display = "block"
    },
    hideNotFoundErrorSection: function() {
        let e = document.querySelector(".js-storelocator .js-map > div");
        return e && e.classList.remove("js-search-not-found"), this.getNotFoundErrorSection().style.display = "none"
    },
    hidePosResultSection: function() {},
    getPosResultListEntryTemplate: function() {
        return this.getContainer().querySelector(".js-pos-list-entry-template")
    },
    getPosResultListEntryForPos: function(e) {
        return this.getContainer().querySelector('.js-pos-list-entry[data-pos-id="' + e + '"]')
    },
    getPosRatingFormTemplate: function() {
        return document.querySelector(".js-pos-rating-form-template")
    },
    getPosRatingFormForPos: function(e) {
        return this.getContainer().querySelector('.js-pos-rating-form[data-pos-id="' + e + '"]')
    },
    getPosRatingDoneTemplate: function() {
        return document.querySelector(".js-pos-rating-done-template")
    },
    getPosRatingDoneForPos: function(e) {
        return this.getContainer().querySelector('.js-pos-rating-done[data-pos-id="' + e + '"]')
    },
    getPosResultList: function() {
        return this.getContainer().querySelector(".js-result-list")
    },
    clearPosResultList: function() {
        const e = this.getPosResultList();
        for (; e.firstChild;) e.removeChild(e.firstChild)
    },
    showMapSection: function() {
        document.querySelector(".js-storelocator .js-header-text").style.visibility = "hidden", document.querySelector(".js-storelocator .js-map-section").classList.add("show-map-section"), document.querySelector(".js-storelocator").classList.add("storelocator__active")
    },
    getLocateMeButton: function() {
        return this.getContainer().querySelector(".js-locate-me-button")
    },
    getDirectOnlyCheckbox: function() {
        return this.getContainer().querySelector("input.js-direct-only-checkbox")
    },
    getDirectOnlyValue: function() {
        return null !== this.getContainer().querySelector("input.js-direct-only-checkbox:checked")
    },
    resetMarkerIcons: function() {
        const e = this.posMarkers.length;
        for (let t = 0; t < e; t++) this.posMarkers[t].setIcon(this.posMarkers[t].data.posMarker)
    },
    closeInfoWindow: function() {
        this.infoWindow && this.infoWindow.close(), this.resetMarkerIcons(), document.getElementById("pos-list-entry-mobile").innerHTML = "", document.getElementById("pos-list-entry-mobile").style.display = "none"
    },
    debounce: function(e, t, o) {
        let s, i, n, r, l;
        const a = function() {
            let c = Date.now() - r;
            c < t && c >= 0 ? s = setTimeout(a, t - c) : (s = null, o || (l = e.apply(n, i), s || (n = i = null)))
        };
        return function() {
            n = this, i = arguments, r = Date.now();
            let c = o && !s;
            return s || (s = setTimeout(a, t)), c && (l = e.apply(n, i), n = i = null), l
        }
    },
    getFirstNonTextChild: function(e) {
        let t = e.firstChild;
        for (; null != t && 3 === t.nodeType;) t = t.nextSibling;
        return t
    },
    scrollToTop: function() {
        window.scroll({
            top: 0,
            left: 0,
            behavior: "smooth"
        })
    }
}, window.StoreLocatorInit = window.StoreLocator.init.bind(StoreLocator));
//# sourceMappingURL=storelocator.min.js.map